<Window x:Name="Simulation_settings" x:Class="MultiColumnList.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:MultiColumnList"
    Title="Simulation settings (Rental service (WCF))" Height="810.448" Width="1361.464" ResizeMode="NoResize">
    <Border Margin="0,0,46,0">
        <Grid Margin="10,10,-39,-27">
            <Grid.Resources>
                <!--
           //
           // The BlogDataTemplate is the visual representation of each
           // Blog entry and associated data.  Notable here is that I use
           // Grid SizeSharing which allows layout sizes to be shared across
           // named groups.  In particular, I have created four columns.  Of the 
           // four columns, three share sizes and the fourth takes the remaining space.
           // Note the SharedSizeGroup property on the ColumnDefinitions.  This
           // will be how the headers and items share their width.  Also, notice
           // that all of the bindings to particular fields in the Blogs data
           // are specified.
           //
           -->
                <DataTemplate x:Key="BlogDataTemplate">
                    <Grid TextBlock.FontSize="20">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="BloggerColumn"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" Margin="10,0,10,0" Text="{Binding methodname}"/>
                        <TextBlock Grid.Column="1" Margin="10,0,10,0" Text="{Binding sleep}"/>
                        <TextBlock Grid.Column="2" Margin="10,0,10,0" Text="{Binding throwException}"/>
                        <TextBlock Grid.Column="3" Margin="10,0,10,0" Text="{Binding consumeheap}"/>
                        <TextBlock Grid.Column="4" Margin="10,0,10,0" Text="{Binding consumeheapfactor}"/>
                        <TextBlock Grid.Column="5" Margin="10,0,10,0" Text="{Binding consumecpu}"/>
                    </Grid>
                </DataTemplate>

                <!--
           //
           // The following template is for the individual headers which are
           // actually Buttons.  These are Buttons in the event
           // that one would want to allow column sorting by clicking
           // on the headers.
           //
           -->
                <ControlTemplate x:Key="Header" TargetType="{x:Type Button}">
                    <Border Background="LightGray" 
						TextBlock.Foreground="white" 
						TextBlock.FontSize="20" 
						Padding="10,3,10,4">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>

                <!--
            // The complete header control
            -->
                <Grid x:Key="ListHeader" Margin="5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BloggerColumn"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn"/>
                    </Grid.ColumnDefinitions>
                    <Button Grid.Column="0" Template="{StaticResource Header}" Content="Method Name"/>
                    <Button Grid.Column="1" Template="{StaticResource Header}" Content="Sleep time"/>
                    <Button Grid.Column="2" Template="{StaticResource Header}" Content="throw Exception"/>
                    <Button Grid.Column="3" Template="{StaticResource Header}" Content="consume heap"/>
                    <Button Grid.Column="4" Template="{StaticResource Header}" Content="heap growth rate"/>
                    <Button Grid.Column="5" Template="{StaticResource Header}" Content="Max out cpu"/>
                </Grid>

                <!--
            // The headered scroll viewer. Similar to the style of the ListView 
            // ScrollViewer
            -->
                <Style x:Key="HeaderedScrollViewer" TargetType="{x:Type ScrollViewer}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                <Grid Background="{TemplateBinding Background}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <DockPanel Margin="{TemplateBinding Padding}">
                                        <ScrollViewer DockPanel.Dock="Top"
											local:SetHorizontalOffset.Offset="{Binding HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}}" 
											HorizontalScrollBarVisibility="Hidden"
											VerticalScrollBarVisibility="Hidden"
											Focusable="false"
											Content="{StaticResource ListHeader}"/>

                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
											KeyboardNavigation.DirectionalNavigation="Local"/>
                                    </DockPanel>

                                    <ScrollBar x:Name="PART_HorizontalScrollBar"
										Orientation="Horizontal"
										Grid.Row="1"
										Maximum="{TemplateBinding ScrollableWidth}"
										ViewportSize="{TemplateBinding ViewportWidth}"
										Value="{TemplateBinding HorizontalOffset}"
										Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                                    <ScrollBar x:Name="PART_VerticalScrollBar"
										Grid.Column="1"
										Maximum="{TemplateBinding ScrollableHeight}"
										ViewportSize="{TemplateBinding ViewportHeight}"
										Value="{TemplateBinding VerticalOffset}"
										Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <!--
            // The ListBox style, incorporating the headered ScrollViewer style
            -->
                <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <ScrollViewer Style="{StaticResource HeaderedScrollViewer}" 
									Grid.IsSharedSizeScope="True">
                                    <StackPanel IsItemsHost="true"/>
                                </ScrollViewer>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

            </Grid.Resources>
            <!--
                //
                // Putting it all together now the data source and data template
                // are set on a plain ListBox. 
                //
            -->
            <ListBox x:Name="lbTodoList" ItemTemplate="{StaticResource BlogDataTemplate}" HorizontalAlignment="Left" Width="1211" Height="367" VerticalAlignment="Top" Margin="22,10,0,0"/>
            <Button Content="Update" HorizontalAlignment="Left" Margin="39,641,0,0" VerticalAlignment="Top" Width="254" Click="Button_Click_1" Height="47" />
            <TextBox x:Name="txtSleeptimer" HorizontalAlignment="Left" Height="23" Margin="39,530,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="120" BorderThickness="2"/>
            <Label Content="Sleep time(Sec)" HorizontalAlignment="Left" Margin="39,499,0,0" VerticalAlignment="Top"/>
            <CheckBox x:Name="chkException" Content="Throw exception" HorizontalAlignment="Left" Margin="39,563,0,0" VerticalAlignment="Top" Height="18" Width="160"/>
            <Label x:Name="lblmethod" Content="Methodname" HorizontalAlignment="Left" Margin="39,468,0,0" VerticalAlignment="Top" Width="254" Background="#FFF79090"/>
            <CheckBox Name="chkUnmanaged" Content="consume heap" HorizontalAlignment="Left" Margin="39,581,0,0" VerticalAlignment="Top"/>
            <Label Content="Please select a method (above)" HorizontalAlignment="Left" Margin="39,442,0,0" VerticalAlignment="Top" Width="225"/>
            <CheckBox Name="chkCpu" Content="Max CPU" HorizontalAlignment="Left" Margin="39,601,0,0" VerticalAlignment="Top" Height="14" Width="120" />
            <TextBox Name="heaprate" HorizontalAlignment="Left" Height="23" Margin="199,579,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="120"/>
            <Label Content="Heap Growth rate(per reqeust)" HorizontalAlignment="Left" Margin="199,548,0,0" VerticalAlignment="Top" Width="120"/>
            <RadioButton Name ="radioFacade1" Content="DataFacade1" HorizontalAlignment="Left" Margin="408,468,0,0" VerticalAlignment="Top"/>
            <RadioButton Name ="radioFacade2" Content="DataFacade2" HorizontalAlignment="Left" Margin="408,499,0,0" VerticalAlignment="Top"/>
        </Grid>
    </Border>
</Window>
